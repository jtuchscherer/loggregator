// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/loggregatorlib/loggregatorclient"
)

type FakeClient struct {
	SchemeStub        func() string
	schemeMutex       sync.RWMutex
	schemeArgsForCall []struct{}
	schemeReturns struct {
		result1 string
	}
	AddressStub        func() string
	addressMutex       sync.RWMutex
	addressArgsForCall []struct{}
	addressReturns struct {
		result1 string
	}
	SendStub        func([]byte)
	sendMutex       sync.RWMutex
	sendArgsForCall []struct {
		arg1 []byte
	}
	StopStub        func()
	stopMutex       sync.RWMutex
	stopArgsForCall []struct{}
}

func (fake *FakeClient) Scheme() string {
	fake.schemeMutex.Lock()
	fake.schemeArgsForCall = append(fake.schemeArgsForCall, struct{}{})
	fake.schemeMutex.Unlock()
	if fake.SchemeStub != nil {
		return fake.SchemeStub()
	} else {
		return fake.schemeReturns.result1
	}
}

func (fake *FakeClient) SchemeCallCount() int {
	fake.schemeMutex.RLock()
	defer fake.schemeMutex.RUnlock()
	return len(fake.schemeArgsForCall)
}

func (fake *FakeClient) SchemeReturns(result1 string) {
	fake.SchemeStub = nil
	fake.schemeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeClient) Address() string {
	fake.addressMutex.Lock()
	fake.addressArgsForCall = append(fake.addressArgsForCall, struct{}{})
	fake.addressMutex.Unlock()
	if fake.AddressStub != nil {
		return fake.AddressStub()
	} else {
		return fake.addressReturns.result1
	}
}

func (fake *FakeClient) AddressCallCount() int {
	fake.addressMutex.RLock()
	defer fake.addressMutex.RUnlock()
	return len(fake.addressArgsForCall)
}

func (fake *FakeClient) AddressReturns(result1 string) {
	fake.AddressStub = nil
	fake.addressReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeClient) Send(arg1 []byte) {
	fake.sendMutex.Lock()
	fake.sendArgsForCall = append(fake.sendArgsForCall, struct {
		arg1 []byte
	}{arg1})
	fake.sendMutex.Unlock()
	if fake.SendStub != nil {
		fake.SendStub(arg1)
	}
}

func (fake *FakeClient) SendCallCount() int {
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	return len(fake.sendArgsForCall)
}

func (fake *FakeClient) SendArgsForCall(i int) []byte {
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	return fake.sendArgsForCall[i].arg1
}

func (fake *FakeClient) Stop() {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct{}{})
	fake.stopMutex.Unlock()
	if fake.StopStub != nil {
		fake.StopStub()
	}
}

func (fake *FakeClient) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

var _ loggregatorclient.Client = new(FakeClient)
