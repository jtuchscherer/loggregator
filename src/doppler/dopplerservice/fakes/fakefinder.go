// This file was generated by counterfeiter
package fakes

import (
	"doppler/dopplerservice"
	"sync"
)

type FakeFinder struct {
	StartStub        func()
	startMutex       sync.RWMutex
	startArgsForCall []struct{}
	StopStub        func()
	stopMutex       sync.RWMutex
	stopArgsForCall []struct{}
	AddressesStub        func() []string
	addressesMutex       sync.RWMutex
	addressesArgsForCall []struct{}
	addressesReturns struct {
		result1 []string
	}
}

func (fake *FakeFinder) Start() {
	fake.startMutex.Lock()
	fake.startArgsForCall = append(fake.startArgsForCall, struct{}{})
	fake.startMutex.Unlock()
	if fake.StartStub != nil {
		fake.StartStub()
	}
}

func (fake *FakeFinder) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeFinder) Stop() {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct{}{})
	fake.stopMutex.Unlock()
	if fake.StopStub != nil {
		fake.StopStub()
	}
}

func (fake *FakeFinder) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeFinder) Addresses() []string {
	fake.addressesMutex.Lock()
	fake.addressesArgsForCall = append(fake.addressesArgsForCall, struct{}{})
	fake.addressesMutex.Unlock()
	if fake.AddressesStub != nil {
		return fake.AddressesStub()
	} else {
		return fake.addressesReturns.result1
	}
}

func (fake *FakeFinder) AddressesCallCount() int {
	fake.addressesMutex.RLock()
	defer fake.addressesMutex.RUnlock()
	return len(fake.addressesArgsForCall)
}

func (fake *FakeFinder) AddressesReturns(result1 []string) {
	fake.AddressesStub = nil
	fake.addressesReturns = struct {
		result1 []string
	}{result1}
}

var _ dopplerservice.Finder = new(FakeFinder)
